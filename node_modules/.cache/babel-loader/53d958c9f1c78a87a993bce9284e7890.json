{"ast":null,"code":"import React,{useContext}from\"react\";import{LoginContext}from'./context';import{If}from'react-if';var Auth=function Auth(props){var loginContext=useContext(LoginContext);var okToRender=false;try{okToRender=loginContext.loggedIn&&props.capability?loginContext.user.user.capabilities.includes(props.capability):false;}catch(error){console.log('NOT AUTHORIZED',error.message);}return/*#__PURE__*/React.createElement(If,{condition:okToRender},props.children);};export default Auth;// const If = props => {\n//   return props.condition ? props.children : null;\n// };\n// <Auth> <div /> </Auth>\n/// are you logged in?\n/// was there no capability specified?\n// <Auth capability=\"foo\"> <div /> </Auth>\n/// are you logged in?\n/// Is there a capability that we care about?\n/// do you have it?","map":{"version":3,"sources":["/home/boshra/401labs/hooks/todo/src/Auth/auth.js"],"names":["React","useContext","LoginContext","If","Auth","props","loginContext","okToRender","loggedIn","capability","user","capabilities","includes","error","console","log","message","children"],"mappings":"AAAA,MAAOA,CAAAA,KAAP,EAAcC,UAAd,KAA+B,OAA/B,CACA,OAASC,YAAT,KAA6B,WAA7B,CACA,OAASC,EAAT,KAAmB,UAAnB,CAGA,GAAMC,CAAAA,IAAI,CAAG,QAAPA,CAAAA,IAAO,CAACC,KAAD,CAAW,CACvB,GAAMC,CAAAA,YAAY,CAAGL,UAAU,CAACC,YAAD,CAA/B,CACA,GAAIK,CAAAA,UAAU,CAAG,KAAjB,CACA,GAAI,CACHA,UAAU,CACTD,YAAY,CAACE,QAAb,EAAyBH,KAAK,CAACI,UAA/B,CACGH,YAAY,CAACI,IAAb,CAAkBA,IAAlB,CAAuBC,YAAvB,CAAoCC,QAApC,CAA6CP,KAAK,CAACI,UAAnD,CADH,CAEG,KAHJ,CAIA,CAAC,MAAOI,KAAP,CAAc,CACfC,OAAO,CAACC,GAAR,CAAY,gBAAZ,CAA8BF,KAAK,CAACG,OAApC,EACA,CACD,mBAAO,oBAAC,EAAD,EAAI,SAAS,CAAET,UAAf,EAA4BF,KAAK,CAACY,QAAlC,CAAP,CACA,CAZD,CAcA,cAAeb,CAAAA,IAAf,CAIA;AACA;AACA;AAGI;AACA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["import React,{useContext} from \"react\";\nimport { LoginContext } from './context';\nimport { If } from 'react-if';\n\n\nconst Auth = (props) => {\n\tconst loginContext = useContext(LoginContext);\n\tlet okToRender = false;\n\ttry {\n\t\tokToRender =\n\t\t\tloginContext.loggedIn && props.capability\n\t\t\t\t? loginContext.user.user.capabilities.includes(props.capability)\n\t\t\t\t: false;\n\t} catch (error) {\n\t\tconsole.log('NOT AUTHORIZED', error.message);\n\t}\n\treturn <If condition={okToRender}>{props.children}</If>;\n};\n\nexport default Auth;\n\n\n\n// const If = props => {\n//   return props.condition ? props.children : null;\n// };\n\n\n    // <Auth> <div /> </Auth>\n    /// are you logged in?\n    /// was there no capability specified?\n\n    // <Auth capability=\"foo\"> <div /> </Auth>\n    /// are you logged in?\n    /// Is there a capability that we care about?\n    /// do you have it?\n\n \n"]},"metadata":{},"sourceType":"module"}