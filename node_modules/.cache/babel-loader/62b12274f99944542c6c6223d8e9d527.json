{"ast":null,"code":"var _jsxFileName = \"/home/boshra/401labs/hooks/todo/src/context/setting.js\";\nimport React, { useState } from 'react';\nexport const SettingsContext = React.createContext();\n\nfunction SettingsProvider(props) {\n  const [complete, toggleComplete] = useState(false);\n  const [itemsPerScreen, setItemsPerScreen] = useState(3);\n  const [sortBy, setSortBy] = useState('difficulty');\n  const [firstPage, setFirstPage] = useState(1);\n  const state = {\n    complete,\n    itemsPerScreen,\n    sortBy,\n    toggleComplete,\n    setItemsPerScreen,\n    setSortBy\n  };\n  return /*#__PURE__*/React.createElement(SettingsContext.Provider, {\n    value: state,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 5\n    }\n  }, props.children);\n}\n\nexport default SettingsProvider; // Create a context for managing application settings and provide this at the application level\n// Display or Hide completed items (boolean)\n// Number of items to display per screen (number)\n// Default sort field (string)\n// You may manually set (hard code) those state settings in the context provider during development\n// Pagination Notes:\n// Only display the first n items in the list, where n is the number to display per screen in your context.\n// If you have more than n items in the list, add a button labeled Next that will replace the list with the next n items in the list.\n// If you are past the first n items (i.e. on page 2 or higher), add a button labeled Previous that will replace the list with the previous n items in the list.","map":{"version":3,"sources":["/home/boshra/401labs/hooks/todo/src/context/setting.js"],"names":["React","useState","SettingsContext","createContext","SettingsProvider","props","complete","toggleComplete","itemsPerScreen","setItemsPerScreen","sortBy","setSortBy","firstPage","setFirstPage","state","children"],"mappings":";AAAA,OAAOA,KAAP,IAAcC,QAAd,QAA6B,OAA7B;AAGA,OAAO,MAAMC,eAAe,GAAGF,KAAK,CAACG,aAAN,EAAxB;;AACP,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AAC/B,QAAM,CAACC,QAAD,EAAWC,cAAX,IAA6BN,QAAQ,CAAC,KAAD,CAA3C;AACA,QAAM,CAACO,cAAD,EAAiBC,iBAAjB,IAAsCR,QAAQ,CAAC,CAAD,CAApD;AACA,QAAM,CAACS,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAAC,YAAD,CAApC;AACA,QAAM,CAACW,SAAD,EAAYC,YAAZ,IAA4BZ,QAAQ,CAAC,CAAD,CAA1C;AACA,QAAMa,KAAK,GAAG;AACZR,IAAAA,QADY;AAEZE,IAAAA,cAFY;AAGZE,IAAAA,MAHY;AAIZH,IAAAA,cAJY;AAKZE,IAAAA,iBALY;AAMZE,IAAAA;AANY,GAAd;AAQA,sBACE,oBAAC,eAAD,CAAiB,QAAjB;AAA0B,IAAA,KAAK,EAAEG,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGT,KAAK,CAACU,QADT,CADF;AAKD;;AACD,eAAeX,gBAAf,C,CAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA","sourcesContent":["import React,{useState} from 'react';\n\n\nexport const SettingsContext = React.createContext();\nfunction SettingsProvider(props) {\n  const [complete, toggleComplete] = useState(false);\n  const [itemsPerScreen, setItemsPerScreen] = useState(3);\n  const [sortBy, setSortBy] = useState('difficulty');\n  const [firstPage, setFirstPage] = useState(1);\n  const state = {\n    complete,\n    itemsPerScreen,\n    sortBy,\n    toggleComplete,\n    setItemsPerScreen,\n    setSortBy\n  }\n  return (\n    <SettingsContext.Provider value={state}>\n      {props.children}\n    </SettingsContext.Provider>\n  )\n}\nexport default SettingsProvider;\n\n// Create a context for managing application settings and provide this at the application level\n// Display or Hide completed items (boolean)\n// Number of items to display per screen (number)\n// Default sort field (string)\n// You may manually set (hard code) those state settings in the context provider during development\n// Pagination Notes:\n\n// Only display the first n items in the list, where n is the number to display per screen in your context.\n// If you have more than n items in the list, add a button labeled Next that will replace the list with the next n items in the list.\n// If you are past the first n items (i.e. on page 2 or higher), add a button labeled Previous that will replace the list with the previous n items in the list.\n"]},"metadata":{},"sourceType":"module"}