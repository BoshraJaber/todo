{"ast":null,"code":"import React, { useState, useEffect } from \"react\";\nimport cookie from \"react-cookies\";\nimport jwt from \"jsonwebtoken\";\nimport dotenv from \"dotenv\";\nimport superagent from \"superagent\";\ndotenv.config();\nconst API = 'https://auth-server-401.herokuapp.com';\nconst SECERT = process.env.JWT_SECRET; // this component is responsible for the login and log out and setting the cookies and the global state.\n// export const LoginContext = React.createContext();\n// const LoginProvider = (props) => {\n// \tconst [user, setUser] = useState({});\n// \tconst [loggedIn, setLoggedIn] = useState(false);\n// \tuseEffect(() => {\n// \t\tconst token = cookie.load('auth');\n// \t\tvalidateToken(token);\n// \t}, []);\n// \tfunction validateToken(token) {\n// \t\ttry {\n// \t\t\tconst user = jwt.decode(token);\n// \t\t\tif (user) setLoginState(true, token, user);\n// \t\t} catch (error) {\n// \t\t\tsetLoginState(false, null, {});\n// \t\t\tconsole.log(`Token Validation Error ${error.message}`);\n// \t\t}\n// \t}\n// \tfunction setLoginState(loggedIn, token, user) {\n// \t\tcookie.save('auth', token);\n// \t\tsetUser({ user });\n// \t\tsetLoggedIn(loggedIn);\n// \t}\n// \tfunction setLogoutState(loggedIn, user) {\n// \t\tcookie.save('auth', null);\n// \t\tsetUser({ user });\n// \t\tsetLoggedIn(loggedIn);\n// \t}\n// \tasync function login(username, password) {\n// \t\ttry {\n// \t\t\tconst response = await superagent\n// \t\t\t\t.post(`${API}/signin`)\n// \t\t\t\t.set('authorization', `Basic ${btoa(`${username}:${password}`)}`);\n// \t\t\tvalidateToken(response.body.token);\n// \t\t} catch (error) {\n// \t\t\tconsole.error('Signin Error', error.message);\n// \t\t}\n// \t}\n// \tasync function signup(email, username, password, role) {\n// \t\ttry {\n// \t\t\tconst response = await superagent.post(`${API}/signup`, {\n// \t\t\t\temail,\n// \t\t\t\tusername,\n// \t\t\t\tpassword,\n// \t\t\t\trole,\n// \t\t\t});\n// \t\t\tvalidateToken(response.body.token);\n// \t\t} catch (error) {\n// \t\t\tconsole.error('Signup Error', error.message);\n// \t\t}\n// \t}\n// \tfunction logout() {\n// \t\tsetLogoutState(false, {});\n// \t}\n// \tconst state = {\n// \t\tloggedIn,\n// \t\tuser,\n// \t\tsetLoggedIn,\n// \t\tlogin,\n// \t\tsignup,\n// \t\tlogout,\n// \t\tsetUser,\n// \t};\n// console.log('state in context', state);\n// \treturn (\n// \t\t<LoginContext.Provider value={state}>\n// \t\t\t{props.children}\n// \t\t</LoginContext.Provider>\n// \t);\n// };\n\nexport default LoginProvider;","map":{"version":3,"sources":["/home/boshra/401labs/hooks/todo/src/Auth/context.js"],"names":["React","useState","useEffect","cookie","jwt","dotenv","superagent","config","API","SECERT","process","env","JWT_SECRET","LoginProvider"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,MAAP,MAAmB,eAAnB;AACA,OAAOC,GAAP,MAAgB,cAAhB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACAD,MAAM,CAACE,MAAP;AAEA,MAAMC,GAAG,GAAG,uCAAZ;AACA,MAAMC,MAAM,GAAGC,OAAO,CAACC,GAAR,CAAYC,UAA3B,C,CACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA,eAAeC,aAAf","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport cookie from \"react-cookies\";\nimport jwt from \"jsonwebtoken\";\nimport dotenv from \"dotenv\";\nimport superagent from \"superagent\";\ndotenv.config();\n\nconst API = 'https://auth-server-401.herokuapp.com';\nconst SECERT = process.env.JWT_SECRET;\n// this component is responsible for the login and log out and setting the cookies and the global state.\n// export const LoginContext = React.createContext();\n\n// const LoginProvider = (props) => {\n// \tconst [user, setUser] = useState({});\n// \tconst [loggedIn, setLoggedIn] = useState(false);\n\n// \tuseEffect(() => {\n// \t\tconst token = cookie.load('auth');\n// \t\tvalidateToken(token);\n// \t}, []);\n\n// \tfunction validateToken(token) {\n// \t\ttry {\n// \t\t\tconst user = jwt.decode(token);\n// \t\t\tif (user) setLoginState(true, token, user);\n// \t\t} catch (error) {\n// \t\t\tsetLoginState(false, null, {});\n// \t\t\tconsole.log(`Token Validation Error ${error.message}`);\n// \t\t}\n// \t}\n\n// \tfunction setLoginState(loggedIn, token, user) {\n// \t\tcookie.save('auth', token);\n// \t\tsetUser({ user });\n// \t\tsetLoggedIn(loggedIn);\n// \t}\n\n// \tfunction setLogoutState(loggedIn, user) {\n// \t\tcookie.save('auth', null);\n// \t\tsetUser({ user });\n// \t\tsetLoggedIn(loggedIn);\n// \t}\n\n// \tasync function login(username, password) {\n// \t\ttry {\n// \t\t\tconst response = await superagent\n// \t\t\t\t.post(`${API}/signin`)\n// \t\t\t\t.set('authorization', `Basic ${btoa(`${username}:${password}`)}`);\n// \t\t\tvalidateToken(response.body.token);\n// \t\t} catch (error) {\n// \t\t\tconsole.error('Signin Error', error.message);\n// \t\t}\n// \t}\n\n// \tasync function signup(email, username, password, role) {\n// \t\ttry {\n// \t\t\tconst response = await superagent.post(`${API}/signup`, {\n// \t\t\t\temail,\n// \t\t\t\tusername,\n// \t\t\t\tpassword,\n// \t\t\t\trole,\n// \t\t\t});\n\n// \t\t\tvalidateToken(response.body.token);\n// \t\t} catch (error) {\n// \t\t\tconsole.error('Signup Error', error.message);\n// \t\t}\n// \t}\n\n// \tfunction logout() {\n// \t\tsetLogoutState(false, {});\n// \t}\n\n// \tconst state = {\n// \t\tloggedIn,\n// \t\tuser,\n// \t\tsetLoggedIn,\n// \t\tlogin,\n// \t\tsignup,\n// \t\tlogout,\n// \t\tsetUser,\n// \t};\n// console.log('state in context', state);\n// \treturn (\n// \t\t<LoginContext.Provider value={state}>\n// \t\t\t{props.children}\n// \t\t</LoginContext.Provider>\n// \t);\n// };\n\n\nexport default LoginProvider;\n"]},"metadata":{},"sourceType":"module"}