{"ast":null,"code":"var _jsxFileName = \"/home/boshra/401labs/hooks/todo/src/Auth/context.js\";\nimport React, { useState, useEffect } from \"react\";\nimport cookie from \"react-cookies\";\nimport jwt from \"jsonwebtoken\";\nimport dotenv from \"dotenv\";\nimport superagent from \"superagent\";\ndotenv.config();\nconst API = 'https://auth-server-401.herokuapp.com';\nconst SECERT = process.env.JWT_SECRET;\nexport const LoginContext = React.createContext();\n\nclass LoginProvider extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.login = (username, password) => {\n      fetch(`${API}/signin`, {\n        method: 'post',\n        mode: 'cors',\n        cache: 'no-cache',\n        headers: new Headers({\n          'Authorization': `Basic ${btoa(`${username}:${password}`)}`\n        })\n      }).then(response => response.text()).then(token => this.validateToken(token)).catch(console.error);\n    };\n\n    this.validateToken = token => {\n      try {\n        let user = jwt.verify(token, process.env.REACT_APP_SECRET);\n        console.log('all good');\n        this.setLoginState(true, token, user);\n      } catch (e) {\n        this.setLoginState(false, null, {});\n        console.log('Token Validation Error', e);\n      }\n    };\n\n    this.logout = () => {\n      this.setLoginState(false, null, {});\n    };\n\n    this.setLoginState = (loggedIn, token, user) => {\n      cookie.save('auth', token);\n      this.setState({\n        token,\n        loggedIn,\n        user\n      });\n    };\n\n    this.state = {\n      loggedIn: false,\n      login: this.login,\n      logout: this.logout,\n      user: {}\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(LoginContext.Provider, {\n      value: this.state,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 7\n      }\n    }, this.props.children);\n  }\n\n}\n\nexport default LoginProvider; // this component is responsible for the login and log out and setting the cookies and the global state.\n// export const LoginContext = React.createContext();\n// const LoginProvider = (props) => {\n// \tconst [user, setUser] = useState({});\n// \tconst [loggedIn, setLoggedIn] = useState(false);\n// \tuseEffect(() => {\n// \t\tconst token = cookie.load('auth');\n// \t\tvalidateToken(token);\n// \t}, []);\n// \tfunction validateToken(token) {\n// \t\ttry {\n// \t\t\tconst user = jwt.decode(token);\n// \t\t\tif (user) setLoginState(true, token, user);\n// \t\t} catch (error) {\n// \t\t\tsetLoginState(false, null, {});\n// \t\t\tconsole.log(`Token Validation Error ${error.message}`);\n// \t\t}\n// \t}\n// \tfunction setLoginState(loggedIn, token, user) {\n// \t\tcookie.save('auth', token);\n// \t\tsetUser({ user });\n// \t\tsetLoggedIn(loggedIn);\n// \t}\n// \tfunction setLogoutState(loggedIn, user) {\n// \t\tcookie.save('auth', null);\n// \t\tsetUser({ user });\n// \t\tsetLoggedIn(loggedIn);\n// \t}\n// \tasync function login(username, password) {\n// \t\ttry {\n// \t\t\tconst response = await superagent\n// \t\t\t\t.post(`${API}/signin`)\n// \t\t\t\t.set('authorization', `Basic ${btoa(`${username}:${password}`)}`);\n// \t\t\tvalidateToken(response.body.token);\n// \t\t} catch (error) {\n// \t\t\tconsole.error('Signin Error', error.message);\n// \t\t}\n// \t}\n// \tasync function signup(email, username, password, role) {\n// \t\ttry {\n// \t\t\tconst response = await superagent.post(`${API}/signup`, {\n// \t\t\t\temail,\n// \t\t\t\tusername,\n// \t\t\t\tpassword,\n// \t\t\t\trole,\n// \t\t\t});\n// \t\t\tvalidateToken(response.body.token);\n// \t\t} catch (error) {\n// \t\t\tconsole.error('Signup Error', error.message);\n// \t\t}\n// \t}\n// \tfunction logout() {\n// \t\tsetLogoutState(false, {});\n// \t}\n// \tconst state = {\n// \t\tloggedIn,\n// \t\tuser,\n// \t\tsetLoggedIn,\n// \t\tlogin,\n// \t\tsignup,\n// \t\tlogout,\n// \t\tsetUser,\n// \t};\n// console.log('state in context', state);\n// \treturn (\n// \t\t<LoginContext.Provider value={state}>\n// \t\t\t{props.children}\n// \t\t</LoginContext.Provider>\n// \t);\n// };\n// export default LoginProvider;","map":{"version":3,"sources":["/home/boshra/401labs/hooks/todo/src/Auth/context.js"],"names":["React","useState","useEffect","cookie","jwt","dotenv","superagent","config","API","SECERT","process","env","JWT_SECRET","LoginContext","createContext","LoginProvider","Component","constructor","props","login","username","password","fetch","method","mode","cache","headers","Headers","btoa","then","response","text","token","validateToken","catch","console","error","user","verify","REACT_APP_SECRET","log","setLoginState","e","logout","loggedIn","save","setState","state","render","children"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport cookie from \"react-cookies\";\nimport jwt from \"jsonwebtoken\";\nimport dotenv from \"dotenv\";\nimport superagent from \"superagent\";\ndotenv.config();\n\nconst API = 'https://auth-server-401.herokuapp.com';\nconst SECERT = process.env.JWT_SECRET;\n\nexport const LoginContext = React.createContext();\n\nclass LoginProvider extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      loggedIn: false,\n      login: this.login,\n      logout: this.logout,\n      user: {},\n    };\n  }\n\n  login = (username, password) => {\n    fetch(`${API}/signin`, {\n      method: 'post',\n      mode: 'cors',\n      cache: 'no-cache',\n      headers: new Headers({\n        'Authorization': `Basic ${btoa(`${username}:${password}`)}`,\n      }),\n    })\n      .then(response => response.text())\n      .then(token => this.validateToken(token))\n      .catch(console.error);\n  }\n\n  validateToken = token => {\n    try {\n      let user = jwt.verify(token, process.env.REACT_APP_SECRET);\n      console.log('all good');\n      this.setLoginState(true, token, user);\n    }\n    catch (e) {\n      this.setLoginState(false, null, {});\n      console.log('Token Validation Error', e);\n    }\n\n  };\n\n  logout = () => {\n    this.setLoginState(false, null, {});\n  };\n\n  setLoginState = (loggedIn, token, user) => {\n    cookie.save('auth', token);\n    this.setState({ token, loggedIn, user });\n  };\n\n  render() {\n    return (\n      <LoginContext.Provider value={this.state}>\n        {this.props.children}\n      </LoginContext.Provider>\n    );\n  }\n}\n\nexport default LoginProvider;\n// this component is responsible for the login and log out and setting the cookies and the global state.\n// export const LoginContext = React.createContext();\n\n// const LoginProvider = (props) => {\n// \tconst [user, setUser] = useState({});\n// \tconst [loggedIn, setLoggedIn] = useState(false);\n\n// \tuseEffect(() => {\n// \t\tconst token = cookie.load('auth');\n// \t\tvalidateToken(token);\n// \t}, []);\n\n// \tfunction validateToken(token) {\n// \t\ttry {\n// \t\t\tconst user = jwt.decode(token);\n// \t\t\tif (user) setLoginState(true, token, user);\n// \t\t} catch (error) {\n// \t\t\tsetLoginState(false, null, {});\n// \t\t\tconsole.log(`Token Validation Error ${error.message}`);\n// \t\t}\n// \t}\n\n// \tfunction setLoginState(loggedIn, token, user) {\n// \t\tcookie.save('auth', token);\n// \t\tsetUser({ user });\n// \t\tsetLoggedIn(loggedIn);\n// \t}\n\n// \tfunction setLogoutState(loggedIn, user) {\n// \t\tcookie.save('auth', null);\n// \t\tsetUser({ user });\n// \t\tsetLoggedIn(loggedIn);\n// \t}\n\n// \tasync function login(username, password) {\n// \t\ttry {\n// \t\t\tconst response = await superagent\n// \t\t\t\t.post(`${API}/signin`)\n// \t\t\t\t.set('authorization', `Basic ${btoa(`${username}:${password}`)}`);\n// \t\t\tvalidateToken(response.body.token);\n// \t\t} catch (error) {\n// \t\t\tconsole.error('Signin Error', error.message);\n// \t\t}\n// \t}\n\n// \tasync function signup(email, username, password, role) {\n// \t\ttry {\n// \t\t\tconst response = await superagent.post(`${API}/signup`, {\n// \t\t\t\temail,\n// \t\t\t\tusername,\n// \t\t\t\tpassword,\n// \t\t\t\trole,\n// \t\t\t});\n\n// \t\t\tvalidateToken(response.body.token);\n// \t\t} catch (error) {\n// \t\t\tconsole.error('Signup Error', error.message);\n// \t\t}\n// \t}\n\n// \tfunction logout() {\n// \t\tsetLogoutState(false, {});\n// \t}\n\n// \tconst state = {\n// \t\tloggedIn,\n// \t\tuser,\n// \t\tsetLoggedIn,\n// \t\tlogin,\n// \t\tsignup,\n// \t\tlogout,\n// \t\tsetUser,\n// \t};\n// console.log('state in context', state);\n// \treturn (\n// \t\t<LoginContext.Provider value={state}>\n// \t\t\t{props.children}\n// \t\t</LoginContext.Provider>\n// \t);\n// };\n\n\n// export default LoginProvider;\n"]},"metadata":{},"sourceType":"module"}